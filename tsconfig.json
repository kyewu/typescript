{
  "compilerOptions": {
    /* 访问 https://aka.ms/tsconfig 以了解有关此文件的更多信息 */
    /* 项目 */
    // "incremental": true,                              /* 保存 .tsbuildinfo 文件以允许对项目进行增量编译。 */
    // "composite": true,                                /* 启用约束，以便 TypeScript 项目可以与项目引用一起使用。 */
    // "tsBuildInfoFile": "./.tsbuildinfo",              /* 指定 .tsbuildinfo 增量编译文件的路径。 */
    // "disableSourceOfProjectReferenceRedirect": true,  /* 禁用在引用复合项目时优先使用源文件而不是声明文件。 */
    // "disableSolutionSearching": true,                 /* 在编辑时选择不进行多项目引用检查。 */
    // "disableReferencedProjectLoad": true,             /* 减少 TypeScript 自动加载的项目数量。 */
    /* 语言和环境 */
    "target": "ESNext", /* 设置生成的 JavaScript 的语言版本，并包含兼容的库声明。 */
    // "lib": [],                                        /* 指定一组捆绑的库声明文件，描述目标运行时环境。 */
    // "jsx": "preserve",                                /* 指定生成的 JSX 代码的类型。 */
    // "libReplacement": true,                           /* 启用库替换。 */
    "experimentalDecorators": true, /* 启用对旧版实验性装饰器的实验性支持。 */
    "emitDecoratorMetadata": true, /* 在源文件中为装饰声明发出设计类型元数据。 */
    // "jsxFactory": "",                                 /* 指定在目标为 React JSX 生成时使用的 JSX 工厂函数，例如 'React.createElement' 或 'h'。 */
    // "jsxFragmentFactory": "",                         /* 指定在目标为 React JSX 生成时用于片段的 JSX 片段引用，例如 'React.Fragment' 或 'Fragment'。 */
    // "jsxImportSource": "",                            /* 指定在使用 'jsx: react-jsx*' 时用于导入 JSX 工厂函数的模块说明符。 */
    // "reactNamespace": "",                             /* 指定 'createElement' 调用的对象。这仅适用于目标为 'react' JSX 生成的情况。 */
    // "noLib": true,                                    /* 禁用包含任何库文件，包括默认的 lib.d.ts。 */
    "useDefineForClassFields": true, /* 发出符合 ECMAScript 标准的类字段。 */
    // "moduleDetection": "auto",                        /* 控制用于检测模块格式 JS 文件的方法。 */
    /* 模块 */
    "module": "ESNext", /* 指定生成的模块代码的类型。 */
    "rootDir": "./src", /* 指定源文件所在的根文件夹。 */
    "moduleResolution": "node", /* 指定 TypeScript 如何根据给定的模块说明符查找文件。 */
    // "baseUrl": "./",                                  /* 指定用于解析非相对模块名称的基目录。 */
    // "paths": {},                                      /* 指定一组条目，将导入重新映射到其他查找位置。 */
    // "rootDirs": [],                                   /* 允许将多个文件夹视为一个文件夹来解析模块。 */
    "typeRoots": [
      "node_modules/@types"
    ], /* 指定多个文件夹，这些文件夹的作用类似于 './node_modules/@types'。 */
    // "types": [],                                      /* 指定无需在源文件中引用即可包含的类型包名称。 */
    // "allowUmdGlobalAccess": true,                     /* 允许从模块访问 UMD 全局变量。 */
    // "moduleSuffixes": [],                             /* 列出解析模块时要搜索的文件名后缀。 */
    // "allowImportingTsExtensions": true,               /* 允许导入包含 TypeScript 文件扩展名的文件。需要 '--moduleResolution bundler' 以及 '--noEmit' 或 '--emitDeclarationOnly' 选项。 */
    // "rewriteRelativeImportExtensions": true,          /* 将相对导入路径中的 '.ts'、'.tsx'、'.mts' 和 '.cts' 文件扩展名重写为输出文件中的 JavaScript 等效扩展名。 */
    // "resolvePackageJsonExports": true,                /* 在解析包导入时使用 package.json 中的 'exports' 字段。 */
    // "resolvePackageJsonImports": true,                /* 在解析导入时使用 package.json 中的 'imports' 字段。 */
    // "customConditions": [],                           /* 在解析导入时，除了解析器特定的默认条件外，还设置其他条件。 */
    // "noUncheckedSideEffectImports": true,             /* 检查副作用导入。 */
    "resolveJsonModule": true, /* 启用导入 .json 文件。 */
    // "allowArbitraryExtensions": true,                 /* 允许导入具有任何扩展名的文件，前提是存在声明文件。 */
    // "noResolve": true,                                /* 禁止 'import'、'require' 或 '<reference>' 扩展 TypeScript 应添加到项目中的文件数量。 */
    /* JavaScript 支持 */
    "allowJs": true, /* 允许 JavaScript 文件成为项目的一部分。使用 'checkJS' 选项可从这些文件中获取错误信息。 */
    "checkJs": true, /* 在类型检查的 JavaScript 文件中启用错误报告。 */
    // "maxNodeModuleJsDepth": 1,                        /* 指定用于检查 'node_modules' 中 JavaScript 文件的最大文件夹深度。仅适用于 'allowJs' 选项。 */
    /* 输出 */
    // "declaration": true,                              /* 从项目中的 TypeScript 和 JavaScript 文件生成 .d.ts 文件。 */
    // "declarationMap": true,                           /* 为 .d.ts 文件创建源映射。 */
    // "emitDeclarationOnly": true,                      /* 仅输出 .d.ts 文件，不输出 JavaScript 文件。 */
    // "sourceMap": true,                                /* 为生成的 JavaScript 文件创建源映射文件。 */
    // "inlineSourceMap": true,                          /* 将源映射文件包含在生成的 JavaScript 中。 */
    // "noEmit": true,                                   /* 禁用编译时的文件输出。 */
    // "outFile": "./",                                  /* 指定一个文件，将所有输出捆绑到一个 JavaScript 文件中。如果 'declaration' 为 true，还指定一个文件，将所有 .d.ts 输出捆绑到该文件中。 */
    "outDir": "./dist/out-tsc", /* 指定所有生成文件的输出文件夹。 */
    "removeComments": true, /* 禁用注释输出。 */
    "importHelpers": true, /* 允许从 tslib 中一次性导入辅助函数，而不是在每个文件中包含它们。 */
    // "downlevelIteration": true,                       /* 为迭代生成更符合规范但冗长且性能较低的 JavaScript。 */
    // "sourceRoot": "",                                 /* 指定调试器查找引用源代码的根路径。 */
    // "mapRoot": "",                                    /* 指定调试器应查找映射文件的位置，而不是生成的位置。 */
    // "inlineSources": true,                            /* 将源代码包含在生成的 JavaScript 中的源映射内。 */
    // "emitBOM": true,                                  /* 在输出文件的开头发出 UTF-8 字节顺序标记 (BOM)。 */
    // "newLine": "crlf",                                /* 设置生成文件时使用的换行符。 */
    // "stripInternal": true,                            /* 禁用输出包含 '@internal' JSDoc 注释的声明。 */
    // "noEmitHelpers": true,                            /* 禁用在编译输出中生成自定义辅助函数，如 '__extends'。 */
    // "noEmitOnError": true,                            /* 如果报告了任何类型检查错误，则禁用文件输出。 */
    // "preserveConstEnums": true,                       /* 禁用在生成的代码中擦除 'const enum' 声明。 */
    // "declarationDir": "./",                           /* 指定生成的声明文件的输出目录。 */
    /* 互操作性约束 */
    // "isolatedModules": true,                          /* 确保每个文件都可以安全地进行转译，而不依赖于其他导入。 */
    // "verbatimModuleSyntax": true,                     /* 不转换或省略未标记为仅类型的任何导入或导出，确保它们按照 'module' 设置的输出文件格式编写。 */
    // "isolatedDeclarations": true,                     /* 要求导出有足够的注释，以便其他工具可以轻松生成声明文件。 */
    // "erasableSyntaxOnly": true,                       /* 不允许使用不属于 ECMAScript 的运行时构造。 */
    // "allowSyntheticDefaultImports": true,             /* 允许在模块没有默认导出时使用 'import x from y'。 */
    "esModuleInterop": true, /* 发出额外的 JavaScript 代码，以简化对 CommonJS 模块的导入支持。这会为类型兼容性启用 'allowSyntheticDefaultImports'。 */
    // "preserveSymlinks": true,                         /* 禁用将符号链接解析为其真实路径。这与 node 中的相同标志相关。 */
    "forceConsistentCasingInFileNames": true, /* 确保导入中的大小写正确。 */
    /* 类型检查 */
    "strict": true, /* 启用所有严格类型检查选项。 */
    // "noImplicitAny": true,                            /* 对隐含 'any' 类型的表达式和声明启用错误报告。 */
    // "strictNullChecks": true,                         /* 在类型检查时，考虑 'null' 和 'undefined'。 */
    // "strictFunctionTypes": true,                      /* 在赋值函数时，检查参数和返回值是否为子类型兼容。 */
    // "strictBindCallApply": true,                      /* 检查 'bind'、'call' 和 'apply' 方法的参数是否与原始函数匹配。 */
    // "strictPropertyInitialization": true,             /* 检查类属性在构造函数中是否已声明但未设置。 */
    // "strictBuiltinIteratorReturn": true,              /* 内置迭代器使用 'TReturn' 类型为 'undefined' 而不是 'any' 进行实例化。 */
    "noImplicitThis": false,                           /* 当 'this' 被赋予 'any' 类型时启用错误报告。 */
    // "useUnknownInCatchVariables": true,               /* 默认将 catch 子句变量设为 'unknown' 而不是 'any'。 */
    // "alwaysStrict": true,                             /* 确保始终发出 'use strict'。 */
    "noUnusedLocals": true, /* 当局部变量未被读取时启用错误报告。 */
    // "noUnusedParameters": true,                       /* 当函数参数未被读取时引发错误。 */
    // "exactOptionalPropertyTypes": true,               /* 按照书写方式解释可选属性类型，而不是添加 'undefined'。 */
    // "noImplicitReturns": true,                        /* 对函数中未显式返回的代码路径启用错误报告。 */
    // "noFallthroughCasesInSwitch": true,               /* 对 switch 语句中的穿透情况启用错误报告。 */
    // "noUncheckedIndexedAccess": true,                 /* 在使用索引访问时，为类型添加 'undefined'。 */
    // "noImplicitOverride": true,                       /* 确保派生类中的重写成员标记有 override 修饰符。 */
    // "noPropertyAccessFromIndexSignature": true,       /* 强制对使用索引类型声明的键使用索引访问器。 */
    // "allowUnusedLabels": true,                        /* 禁用对未使用标签的错误报告。 */
    // "allowUnreachableCode": true,                     /* 禁用对无法访问代码的错误报告。 */
    /* 完整性 */
    // "skipDefaultLibCheck": true,                      /* 跳过对 TypeScript 附带的 .d.ts 文件的类型检查。 */
    "skipLibCheck": true /* 跳过对所有 .d.ts 文件的类型检查。 */
  },
}